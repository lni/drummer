// Copyright 2017 Lei Ni (nilei81@gmail.com).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: drummer.proto

// Package drummerpb contains definition of internal structs and messages used
// by the Drummer component. Your dragonboat application only needs to
// import this package when you choose to let drummer to manage your distributed
// nodehost instances.

package drummerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Change_Type int32

const (
	Change_CREATE Change_Type = 0
)

// Enum value maps for Change_Type.
var (
	Change_Type_name = map[int32]string{
		0: "CREATE",
	}
	Change_Type_value = map[string]int32{
		"CREATE": 0,
	}
)

func (x Change_Type) Enum() *Change_Type {
	p := new(Change_Type)
	*p = x
	return p
}

func (x Change_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Change_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_drummer_proto_enumTypes[0].Descriptor()
}

func (Change_Type) Type() protoreflect.EnumType {
	return &file_drummer_proto_enumTypes[0]
}

func (x Change_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Change_Type.Descriptor instead.
func (Change_Type) EnumDescriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{4, 0}
}

type ChangeResponse_Code int32

const (
	ChangeResponse_OK              ChangeResponse_Code = 0
	ChangeResponse_SHARD_NOT_FOUND ChangeResponse_Code = 1
	ChangeResponse_CONFLICT_FOUND  ChangeResponse_Code = 2
	ChangeResponse_UNKNOWN_RETRY   ChangeResponse_Code = 3
	ChangeResponse_SHARD_EXIST     ChangeResponse_Code = 4
	ChangeResponse_BOOTSTRAPPED    ChangeResponse_Code = 5
	ChangeResponse_REGIONS_SET     ChangeResponse_Code = 6
)

// Enum value maps for ChangeResponse_Code.
var (
	ChangeResponse_Code_name = map[int32]string{
		0: "OK",
		1: "SHARD_NOT_FOUND",
		2: "CONFLICT_FOUND",
		3: "UNKNOWN_RETRY",
		4: "SHARD_EXIST",
		5: "BOOTSTRAPPED",
		6: "REGIONS_SET",
	}
	ChangeResponse_Code_value = map[string]int32{
		"OK":              0,
		"SHARD_NOT_FOUND": 1,
		"CONFLICT_FOUND":  2,
		"UNKNOWN_RETRY":   3,
		"SHARD_EXIST":     4,
		"BOOTSTRAPPED":    5,
		"REGIONS_SET":     6,
	}
)

func (x ChangeResponse_Code) Enum() *ChangeResponse_Code {
	p := new(ChangeResponse_Code)
	*p = x
	return p
}

func (x ChangeResponse_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeResponse_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_drummer_proto_enumTypes[1].Descriptor()
}

func (ChangeResponse_Code) Type() protoreflect.EnumType {
	return &file_drummer_proto_enumTypes[1]
}

func (x ChangeResponse_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeResponse_Code.Descriptor instead.
func (ChangeResponse_Code) EnumDescriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{5, 0}
}

type Update_Type int32

const (
	Update_SHARD         Update_Type = 0
	Update_KV            Update_Type = 1
	Update_TICK          Update_Type = 2
	Update_NODEHOST_INFO Update_Type = 3
	Update_REQUESTS      Update_Type = 4
)

// Enum value maps for Update_Type.
var (
	Update_Type_name = map[int32]string{
		0: "SHARD",
		1: "KV",
		2: "TICK",
		3: "NODEHOST_INFO",
		4: "REQUESTS",
	}
	Update_Type_value = map[string]int32{
		"SHARD":         0,
		"KV":            1,
		"TICK":          2,
		"NODEHOST_INFO": 3,
		"REQUESTS":      4,
	}
)

func (x Update_Type) Enum() *Update_Type {
	p := new(Update_Type)
	*p = x
	return p
}

func (x Update_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Update_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_drummer_proto_enumTypes[2].Descriptor()
}

func (Update_Type) Type() protoreflect.EnumType {
	return &file_drummer_proto_enumTypes[2]
}

func (x Update_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Update_Type.Descriptor instead.
func (Update_Type) EnumDescriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{6, 0}
}

type LookupRequest_Type int32

const (
	LookupRequest_SHARD             LookupRequest_Type = 0
	LookupRequest_KV                LookupRequest_Type = 1
	LookupRequest_SCHEDULER_CONTEXT LookupRequest_Type = 3
	LookupRequest_REQUESTS          LookupRequest_Type = 4
	LookupRequest_SHARD_STATES      LookupRequest_Type = 5
)

// Enum value maps for LookupRequest_Type.
var (
	LookupRequest_Type_name = map[int32]string{
		0: "SHARD",
		1: "KV",
		3: "SCHEDULER_CONTEXT",
		4: "REQUESTS",
		5: "SHARD_STATES",
	}
	LookupRequest_Type_value = map[string]int32{
		"SHARD":             0,
		"KV":                1,
		"SCHEDULER_CONTEXT": 3,
		"REQUESTS":          4,
		"SHARD_STATES":      5,
	}
)

func (x LookupRequest_Type) Enum() *LookupRequest_Type {
	p := new(LookupRequest_Type)
	*p = x
	return p
}

func (x LookupRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookupRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_drummer_proto_enumTypes[3].Descriptor()
}

func (LookupRequest_Type) Type() protoreflect.EnumType {
	return &file_drummer_proto_enumTypes[3]
}

func (x LookupRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookupRequest_Type.Descriptor instead.
func (LookupRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{7, 0}
}

type LookupResponse_Code int32

const (
	LookupResponse_OK              LookupResponse_Code = 0
	LookupResponse_SHARD_NOT_FOUND LookupResponse_Code = 1
)

// Enum value maps for LookupResponse_Code.
var (
	LookupResponse_Code_name = map[int32]string{
		0: "OK",
		1: "SHARD_NOT_FOUND",
	}
	LookupResponse_Code_value = map[string]int32{
		"OK":              0,
		"SHARD_NOT_FOUND": 1,
	}
)

func (x LookupResponse_Code) Enum() *LookupResponse_Code {
	p := new(LookupResponse_Code)
	*p = x
	return p
}

func (x LookupResponse_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookupResponse_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_drummer_proto_enumTypes[4].Descriptor()
}

func (LookupResponse_Code) Type() protoreflect.EnumType {
	return &file_drummer_proto_enumTypes[4]
}

func (x LookupResponse_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookupResponse_Code.Descriptor instead.
func (LookupResponse_Code) EnumDescriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{8, 0}
}

type Request_Type int32

const (
	Request_CREATE Request_Type = 0
	Request_DELETE Request_Type = 1
	Request_ADD    Request_Type = 2
	Request_KILL   Request_Type = 3
)

// Enum value maps for Request_Type.
var (
	Request_Type_name = map[int32]string{
		0: "CREATE",
		1: "DELETE",
		2: "ADD",
		3: "KILL",
	}
	Request_Type_value = map[string]int32{
		"CREATE": 0,
		"DELETE": 1,
		"ADD":    2,
		"KILL":   3,
	}
)

func (x Request_Type) Enum() *Request_Type {
	p := new(Request_Type)
	*p = x
	return p
}

func (x Request_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Request_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_drummer_proto_enumTypes[5].Descriptor()
}

func (Request_Type) Type() protoreflect.EnumType {
	return &file_drummer_proto_enumTypes[5]
}

func (x Request_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Request_Type.Descriptor instead.
func (Request_Type) EnumDescriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{9, 0}
}

type ShardState_State int32

const (
	ShardState_OK          ShardState_State = 0
	ShardState_UNAVAILABLE ShardState_State = 1
)

// Enum value maps for ShardState_State.
var (
	ShardState_State_name = map[int32]string{
		0: "OK",
		1: "UNAVAILABLE",
	}
	ShardState_State_value = map[string]int32{
		"OK":          0,
		"UNAVAILABLE": 1,
	}
)

func (x ShardState_State) Enum() *ShardState_State {
	p := new(ShardState_State)
	*p = x
	return p
}

func (x ShardState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShardState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_drummer_proto_enumTypes[6].Descriptor()
}

func (ShardState_State) Type() protoreflect.EnumType {
	return &file_drummer_proto_enumTypes[6]
}

func (x ShardState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShardState_State.Descriptor instead.
func (ShardState_State) EnumDescriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{11, 0}
}

// Regions is the message used to describe the requested region.
type Regions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region []string `protobuf:"bytes,1,rep,name=region,proto3" json:"region,omitempty"`
	Count  []uint64 `protobuf:"varint,2,rep,packed,name=count,proto3" json:"count,omitempty"`
}

func (x *Regions) Reset() {
	*x = Regions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regions) ProtoMessage() {}

func (x *Regions) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regions.ProtoReflect.Descriptor instead.
func (*Regions) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{0}
}

func (x *Regions) GetRegion() []string {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Regions) GetCount() []uint64 {
	if x != nil {
		return x.Count
	}
	return nil
}

// Shard is the message used to describe a defined raft shard.
type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []uint64 `protobuf:"varint,1,rep,packed,name=members,proto3" json:"members,omitempty"`
	ShardId uint64   `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	AppName string   `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{1}
}

func (x *Shard) GetMembers() []uint64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Shard) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Shard) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// ShardCollection is the message used to describe a list of shards.
type ShardCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (x *ShardCollection) Reset() {
	*x = ShardCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardCollection) ProtoMessage() {}

func (x *ShardCollection) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardCollection.ProtoReflect.Descriptor instead.
func (*ShardCollection) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{2}
}

func (x *ShardCollection) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

// KV is the message used to describe a Key-Value request.
type KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	InstanceId    uint64 `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Tick          uint64 `protobuf:"varint,4,opt,name=tick,proto3" json:"tick,omitempty"`
	OldInstanceId uint64 `protobuf:"varint,5,opt,name=old_instance_id,json=oldInstanceId,proto3" json:"old_instance_id,omitempty"`
	Finalized     bool   `protobuf:"varint,6,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (x *KV) Reset() {
	*x = KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV) ProtoMessage() {}

func (x *KV) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV.ProtoReflect.Descriptor instead.
func (*KV) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{3}
}

func (x *KV) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KV) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KV) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *KV) GetTick() uint64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *KV) GetOldInstanceId() uint64 {
	if x != nil {
		return x.OldInstanceId
	}
	return 0
}

func (x *KV) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

// Change is the message used to define new raft shards in Drummer.
type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    Change_Type `protobuf:"varint,1,opt,name=type,proto3,enum=drummerpb.Change_Type" json:"type,omitempty"`
	ShardId uint64      `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Members []uint64    `protobuf:"varint,3,rep,packed,name=members,proto3" json:"members,omitempty"`
	AppName string      `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{4}
}

func (x *Change) GetType() Change_Type {
	if x != nil {
		return x.Type
	}
	return Change_CREATE
}

func (x *Change) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Change) GetMembers() []uint64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Change) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// ChangeResponse is the message issued by Drummer in response to Change
// messages.
type ChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ChangeResponse_Code `protobuf:"varint,1,opt,name=code,proto3,enum=drummerpb.ChangeResponse_Code" json:"code,omitempty"`
}

func (x *ChangeResponse) Reset() {
	*x = ChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeResponse) ProtoMessage() {}

func (x *ChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeResponse.ProtoReflect.Descriptor instead.
func (*ChangeResponse) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeResponse) GetCode() ChangeResponse_Code {
	if x != nil {
		return x.Code
	}
	return ChangeResponse_OK
}

// Update is the message used for updating DrummerDB. DrummerDB is used to
// store raft shard definitions and Drummer key-value pairs.
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change       *Change                    `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	Type         Update_Type                `protobuf:"varint,2,opt,name=type,proto3,enum=drummerpb.Update_Type" json:"type,omitempty"`
	KvUpdate     *KV                        `protobuf:"bytes,3,opt,name=kv_update,json=kvUpdate,proto3" json:"kv_update,omitempty"`
	NodehostInfo *NodeHostInfo              `protobuf:"bytes,4,opt,name=nodehost_info,json=nodehostInfo,proto3" json:"nodehost_info,omitempty"`
	Requests     *NodeHostRequestCollection `protobuf:"bytes,5,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{6}
}

func (x *Update) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Update) GetType() Update_Type {
	if x != nil {
		return x.Type
	}
	return Update_SHARD
}

func (x *Update) GetKvUpdate() *KV {
	if x != nil {
		return x.KvUpdate
	}
	return nil
}

func (x *Update) GetNodehostInfo() *NodeHostInfo {
	if x != nil {
		return x.NodehostInfo
	}
	return nil
}

func (x *Update) GetRequests() *NodeHostRequestCollection {
	if x != nil {
		return x.Requests
	}
	return nil
}

// LookupRequest is the lookup request message.
type LookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        LookupRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=drummerpb.LookupRequest_Type" json:"type,omitempty"`
	ShardIdList []uint64           `protobuf:"varint,2,rep,packed,name=shard_id_list,json=shardIdList,proto3" json:"shard_id_list,omitempty"`
	KvLookup    *KV                `protobuf:"bytes,3,opt,name=kv_lookup,json=kvLookup,proto3" json:"kv_lookup,omitempty"`
	RequestsId  uint64             `protobuf:"varint,4,opt,name=requests_id,json=requestsId,proto3" json:"requests_id,omitempty"`
	Address     string             `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Stats       *ShardStateRequest `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *LookupRequest) Reset() {
	*x = LookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRequest) ProtoMessage() {}

func (x *LookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRequest.ProtoReflect.Descriptor instead.
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{7}
}

func (x *LookupRequest) GetType() LookupRequest_Type {
	if x != nil {
		return x.Type
	}
	return LookupRequest_SHARD
}

func (x *LookupRequest) GetShardIdList() []uint64 {
	if x != nil {
		return x.ShardIdList
	}
	return nil
}

func (x *LookupRequest) GetKvLookup() *KV {
	if x != nil {
		return x.KvLookup
	}
	return nil
}

func (x *LookupRequest) GetRequestsId() uint64 {
	if x != nil {
		return x.RequestsId
	}
	return 0
}

func (x *LookupRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LookupRequest) GetStats() *ShardStateRequest {
	if x != nil {
		return x.Stats
	}
	return nil
}

// LookupResponse is the lookup response message.
type LookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     LookupResponse_Code        `protobuf:"varint,1,opt,name=code,proto3,enum=drummerpb.LookupResponse_Code" json:"code,omitempty"`
	Shards   []*Shard                   `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	KvResult *KV                        `protobuf:"bytes,3,opt,name=kv_result,json=kvResult,proto3" json:"kv_result,omitempty"`
	Requests *NodeHostRequestCollection `protobuf:"bytes,4,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (x *LookupResponse) Reset() {
	*x = LookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupResponse) ProtoMessage() {}

func (x *LookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupResponse.ProtoReflect.Descriptor instead.
func (*LookupResponse) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{8}
}

func (x *LookupResponse) GetCode() LookupResponse_Code {
	if x != nil {
		return x.Code
	}
	return LookupResponse_OK
}

func (x *LookupResponse) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *LookupResponse) GetKvResult() *KV {
	if x != nil {
		return x.KvResult
	}
	return nil
}

func (x *LookupResponse) GetRequests() *NodeHostRequestCollection {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Request is the Request sent to Nodehosts.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Request_Type `protobuf:"varint,1,opt,name=type,proto3,enum=drummerpb.Request_Type" json:"type,omitempty"`
	ShardId      uint64       `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Members      []uint64     `protobuf:"varint,3,rep,packed,name=members,proto3" json:"members,omitempty"`
	AppName      string       `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	ConfChangeId uint64       `protobuf:"varint,5,opt,name=conf_change_id,json=confChangeId,proto3" json:"conf_change_id,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{9}
}

func (x *Request) GetType() Request_Type {
	if x != nil {
		return x.Type
	}
	return Request_CREATE
}

func (x *Request) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Request) GetMembers() []uint64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Request) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Request) GetConfChangeId() uint64 {
	if x != nil {
		return x.ConfChangeId
	}
	return 0
}

// ShardStateRequest is the message used to send a list of shard id values
// to Drummer for requesting shard state details.
type ShardStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardIdList []uint64 `protobuf:"varint,1,rep,packed,name=shard_id_list,json=shardIdList,proto3" json:"shard_id_list,omitempty"`
}

func (x *ShardStateRequest) Reset() {
	*x = ShardStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardStateRequest) ProtoMessage() {}

func (x *ShardStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardStateRequest.ProtoReflect.Descriptor instead.
func (*ShardStateRequest) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{10}
}

func (x *ShardStateRequest) GetShardIdList() []uint64 {
	if x != nil {
		return x.ShardIdList
	}
	return nil
}

// ShardState is the message used to provide shard state to clients.
type ShardState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId           uint64            `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	LeaderReplicaId   uint64            `protobuf:"varint,2,opt,name=leader_replica_id,json=leaderReplicaId,proto3" json:"leader_replica_id,omitempty"`
	Replicas          map[uint64]string `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RPCAddresses      map[uint64]string `protobuf:"bytes,4,rep,name=RPCAddresses,proto3" json:"RPCAddresses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State             ShardState_State  `protobuf:"varint,5,opt,name=state,proto3,enum=drummerpb.ShardState_State" json:"state,omitempty"`
	ConfigChangeIndex uint64            `protobuf:"varint,6,opt,name=config_change_index,json=configChangeIndex,proto3" json:"config_change_index,omitempty"`
}

func (x *ShardState) Reset() {
	*x = ShardState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardState) ProtoMessage() {}

func (x *ShardState) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardState.ProtoReflect.Descriptor instead.
func (*ShardState) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{11}
}

func (x *ShardState) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardState) GetLeaderReplicaId() uint64 {
	if x != nil {
		return x.LeaderReplicaId
	}
	return 0
}

func (x *ShardState) GetReplicas() map[uint64]string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *ShardState) GetRPCAddresses() map[uint64]string {
	if x != nil {
		return x.RPCAddresses
	}
	return nil
}

func (x *ShardState) GetState() ShardState_State {
	if x != nil {
		return x.State
	}
	return ShardState_OK
}

func (x *ShardState) GetConfigChangeIndex() uint64 {
	if x != nil {
		return x.ConfigChangeIndex
	}
	return 0
}

type ShardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId           uint64            `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId         uint64            `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	IsLeader          bool              `protobuf:"varint,3,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
	Replicas          map[uint64]string `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigChangeIndex uint64            `protobuf:"varint,5,opt,name=config_change_index,json=configChangeIndex,proto3" json:"config_change_index,omitempty"`
	Incomplete        bool              `protobuf:"varint,6,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	Pending           bool              `protobuf:"varint,7,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *ShardInfo) Reset() {
	*x = ShardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardInfo) ProtoMessage() {}

func (x *ShardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardInfo.ProtoReflect.Descriptor instead.
func (*ShardInfo) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{12}
}

func (x *ShardInfo) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardInfo) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *ShardInfo) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *ShardInfo) GetReplicas() map[uint64]string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *ShardInfo) GetConfigChangeIndex() uint64 {
	if x != nil {
		return x.ConfigChangeIndex
	}
	return 0
}

func (x *ShardInfo) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *ShardInfo) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

// LogInfo is the message used by nodehost to notify Drummer that it has
// raft log that belongs to the specified raft shard.
type LogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId   uint64 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId uint64 `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
}

func (x *LogInfo) Reset() {
	*x = LogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInfo) ProtoMessage() {}

func (x *LogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInfo.ProtoReflect.Descriptor instead.
func (*LogInfo) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{13}
}

func (x *LogInfo) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *LogInfo) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

// ShardStates contains a list of ShardState messages.
type ShardStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection []*ShardState `protobuf:"bytes,1,rep,name=collection,proto3" json:"collection,omitempty"`
}

func (x *ShardStates) Reset() {
	*x = ShardStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardStates) ProtoMessage() {}

func (x *ShardStates) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardStates.ProtoReflect.Descriptor instead.
func (*ShardStates) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{14}
}

func (x *ShardStates) GetCollection() []*ShardState {
	if x != nil {
		return x.Collection
	}
	return nil
}

// NodeHostInfo is the message used by nodehost to report its state, including
// managed raft shards and local persistent logs to Drummer.
type NodeHostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaftAddress      string       `protobuf:"bytes,1,opt,name=raft_address,json=raftAddress,proto3" json:"raft_address,omitempty"`
	ShardInfo        []*ShardInfo `protobuf:"bytes,2,rep,name=shard_info,json=shardInfo,proto3" json:"shard_info,omitempty"`
	ShardIdList      []uint64     `protobuf:"varint,3,rep,packed,name=shard_id_list,json=shardIdList,proto3" json:"shard_id_list,omitempty"`
	LastTick         uint64       `protobuf:"varint,4,opt,name=last_tick,json=lastTick,proto3" json:"last_tick,omitempty"`
	PlogInfoIncluded bool         `protobuf:"varint,5,opt,name=plog_info_included,json=plogInfoIncluded,proto3" json:"plog_info_included,omitempty"`
	PlogInfo         []*LogInfo   `protobuf:"bytes,6,rep,name=plog_info,json=plogInfo,proto3" json:"plog_info,omitempty"`
	Region           string       `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	RPCAddress       string       `protobuf:"bytes,8,opt,name=RPCAddress,proto3" json:"RPCAddress,omitempty"`
}

func (x *NodeHostInfo) Reset() {
	*x = NodeHostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHostInfo) ProtoMessage() {}

func (x *NodeHostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHostInfo.ProtoReflect.Descriptor instead.
func (*NodeHostInfo) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{15}
}

func (x *NodeHostInfo) GetRaftAddress() string {
	if x != nil {
		return x.RaftAddress
	}
	return ""
}

func (x *NodeHostInfo) GetShardInfo() []*ShardInfo {
	if x != nil {
		return x.ShardInfo
	}
	return nil
}

func (x *NodeHostInfo) GetShardIdList() []uint64 {
	if x != nil {
		return x.ShardIdList
	}
	return nil
}

func (x *NodeHostInfo) GetLastTick() uint64 {
	if x != nil {
		return x.LastTick
	}
	return 0
}

func (x *NodeHostInfo) GetPlogInfoIncluded() bool {
	if x != nil {
		return x.PlogInfoIncluded
	}
	return false
}

func (x *NodeHostInfo) GetPlogInfo() []*LogInfo {
	if x != nil {
		return x.PlogInfo
	}
	return nil
}

func (x *NodeHostInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NodeHostInfo) GetRPCAddress() string {
	if x != nil {
		return x.RPCAddress
	}
	return ""
}

// NodeHostCollection contains a list of NodeHostInfo messages.
type NodeHostCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection []*NodeHostInfo `protobuf:"bytes,1,rep,name=collection,proto3" json:"collection,omitempty"`
	Tick       uint64          `protobuf:"varint,2,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (x *NodeHostCollection) Reset() {
	*x = NodeHostCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHostCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHostCollection) ProtoMessage() {}

func (x *NodeHostCollection) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHostCollection.ProtoReflect.Descriptor instead.
func (*NodeHostCollection) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{16}
}

func (x *NodeHostCollection) GetCollection() []*NodeHostInfo {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *NodeHostCollection) GetTick() uint64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

// ConfigChangeIndexList is the message used to report ConfChangeIndex values
// of shards.
type ConfigChangeIndexList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes map[uint64]uint64 `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ConfigChangeIndexList) Reset() {
	*x = ConfigChangeIndexList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigChangeIndexList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigChangeIndexList) ProtoMessage() {}

func (x *ConfigChangeIndexList) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigChangeIndexList.ProtoReflect.Descriptor instead.
func (*ConfigChangeIndexList) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{17}
}

func (x *ConfigChangeIndexList) GetIndexes() map[uint64]uint64 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

// DeploymentInfo is a message that contains the deployment id generated by
// Drummer.
type DeploymentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId uint64 `protobuf:"varint,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *DeploymentInfo) Reset() {
	*x = DeploymentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentInfo) ProtoMessage() {}

func (x *DeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentInfo.ProtoReflect.Descriptor instead.
func (*DeploymentInfo) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{18}
}

func (x *DeploymentInfo) GetDeploymentId() uint64 {
	if x != nil {
		return x.DeploymentId
	}
	return 0
}

// Empty is a dummy message.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{19}
}

// NodeHostRequest is the request message sent to NodeHost by Drummer.
type NodeHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change               *Request `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	ReplicaIdList        []uint64 `protobuf:"varint,2,rep,packed,name=replica_id_list,json=replicaIdList,proto3" json:"replica_id_list,omitempty"`
	AddressList          []string `protobuf:"bytes,3,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	InstantiateReplicaId uint64   `protobuf:"varint,4,opt,name=instantiate_replica_id,json=instantiateReplicaId,proto3" json:"instantiate_replica_id,omitempty"`
	RaftAddress          string   `protobuf:"bytes,5,opt,name=raft_address,json=raftAddress,proto3" json:"raft_address,omitempty"`
	Join                 bool     `protobuf:"varint,6,opt,name=join,proto3" json:"join,omitempty"`
	Restore              bool     `protobuf:"varint,7,opt,name=restore,proto3" json:"restore,omitempty"`
	AppName              string   `protobuf:"bytes,8,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Config               *Config  `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *NodeHostRequest) Reset() {
	*x = NodeHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHostRequest) ProtoMessage() {}

func (x *NodeHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHostRequest.ProtoReflect.Descriptor instead.
func (*NodeHostRequest) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{20}
}

func (x *NodeHostRequest) GetChange() *Request {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *NodeHostRequest) GetReplicaIdList() []uint64 {
	if x != nil {
		return x.ReplicaIdList
	}
	return nil
}

func (x *NodeHostRequest) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *NodeHostRequest) GetInstantiateReplicaId() uint64 {
	if x != nil {
		return x.InstantiateReplicaId
	}
	return 0
}

func (x *NodeHostRequest) GetRaftAddress() string {
	if x != nil {
		return x.RaftAddress
	}
	return ""
}

func (x *NodeHostRequest) GetJoin() bool {
	if x != nil {
		return x.Join
	}
	return false
}

func (x *NodeHostRequest) GetRestore() bool {
	if x != nil {
		return x.Restore
	}
	return false
}

func (x *NodeHostRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *NodeHostRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// NodeHostRequestCollection contains a list of NodeHostRequest messages.
type NodeHostRequestCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*NodeHostRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *NodeHostRequestCollection) Reset() {
	*x = NodeHostRequestCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHostRequestCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHostRequestCollection) ProtoMessage() {}

func (x *NodeHostRequestCollection) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHostRequestCollection.ProtoReflect.Descriptor instead.
func (*NodeHostRequestCollection) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{21}
}

func (x *NodeHostRequestCollection) GetRequests() []*NodeHostRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type DrummerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DrummerConfigRequest) Reset() {
	*x = DrummerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrummerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrummerConfigRequest) ProtoMessage() {}

func (x *DrummerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrummerConfigRequest.ProtoReflect.Descriptor instead.
func (*DrummerConfigRequest) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{22}
}

func (x *DrummerConfigRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *DrummerConfigRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Config is the message used to describe configurations for raft shards.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElectionRTT              uint64 `protobuf:"varint,1,opt,name=ElectionRTT,proto3" json:"ElectionRTT,omitempty"`
	HeartbeatRTT             uint64 `protobuf:"varint,2,opt,name=HeartbeatRTT,proto3" json:"HeartbeatRTT,omitempty"`
	CheckQuorum              bool   `protobuf:"varint,5,opt,name=CheckQuorum,proto3" json:"CheckQuorum,omitempty"`
	CompactionOverhead       uint64 `protobuf:"varint,6,opt,name=CompactionOverhead,proto3" json:"CompactionOverhead,omitempty"`
	SnapshotEntries          uint64 `protobuf:"varint,7,opt,name=SnapshotEntries,proto3" json:"SnapshotEntries,omitempty"`
	RaftShardAddresses       string `protobuf:"bytes,8,opt,name=RaftShardAddresses,proto3" json:"RaftShardAddresses,omitempty"`
	DrummerAddress           string `protobuf:"bytes,9,opt,name=DrummerAddress,proto3" json:"DrummerAddress,omitempty"`
	DrummerNodeID            uint64 `protobuf:"varint,10,opt,name=DrummerNodeID,proto3" json:"DrummerNodeID,omitempty"`
	DrummerNodeHostDirectory string `protobuf:"bytes,11,opt,name=DrummerNodeHostDirectory,proto3" json:"DrummerNodeHostDirectory,omitempty"`
	DrummerWALDirectory      string `protobuf:"bytes,12,opt,name=DrummerWALDirectory,proto3" json:"DrummerWALDirectory,omitempty"`
	MutualTLS                bool   `protobuf:"varint,13,opt,name=MutualTLS,proto3" json:"MutualTLS,omitempty"`
	CAFile                   string `protobuf:"bytes,14,opt,name=CAFile,proto3" json:"CAFile,omitempty"`
	CertFile                 string `protobuf:"bytes,15,opt,name=CertFile,proto3" json:"CertFile,omitempty"`
	KeyFile                  string `protobuf:"bytes,16,opt,name=KeyFile,proto3" json:"KeyFile,omitempty"`
	MaxInMemLogSize          uint64 `protobuf:"varint,17,opt,name=MaxInMemLogSize,proto3" json:"MaxInMemLogSize,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drummer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_drummer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_drummer_proto_rawDescGZIP(), []int{23}
}

func (x *Config) GetElectionRTT() uint64 {
	if x != nil {
		return x.ElectionRTT
	}
	return 0
}

func (x *Config) GetHeartbeatRTT() uint64 {
	if x != nil {
		return x.HeartbeatRTT
	}
	return 0
}

func (x *Config) GetCheckQuorum() bool {
	if x != nil {
		return x.CheckQuorum
	}
	return false
}

func (x *Config) GetCompactionOverhead() uint64 {
	if x != nil {
		return x.CompactionOverhead
	}
	return 0
}

func (x *Config) GetSnapshotEntries() uint64 {
	if x != nil {
		return x.SnapshotEntries
	}
	return 0
}

func (x *Config) GetRaftShardAddresses() string {
	if x != nil {
		return x.RaftShardAddresses
	}
	return ""
}

func (x *Config) GetDrummerAddress() string {
	if x != nil {
		return x.DrummerAddress
	}
	return ""
}

func (x *Config) GetDrummerNodeID() uint64 {
	if x != nil {
		return x.DrummerNodeID
	}
	return 0
}

func (x *Config) GetDrummerNodeHostDirectory() string {
	if x != nil {
		return x.DrummerNodeHostDirectory
	}
	return ""
}

func (x *Config) GetDrummerWALDirectory() string {
	if x != nil {
		return x.DrummerWALDirectory
	}
	return ""
}

func (x *Config) GetMutualTLS() bool {
	if x != nil {
		return x.MutualTLS
	}
	return false
}

func (x *Config) GetCAFile() string {
	if x != nil {
		return x.CAFile
	}
	return ""
}

func (x *Config) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *Config) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *Config) GetMaxInMemLogSize() uint64 {
	if x != nil {
		return x.MaxInMemLogSize
	}
	return 0
}

var File_drummer_proto protoreflect.FileDescriptor

var file_drummer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x22, 0x37, 0x0a, 0x07, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0f,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x02, 0x4b, 0x56,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64,
	0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x22, 0xc4,
	0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x06, 0x22, 0xd1, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6b, 0x76, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x52, 0x08, 0x6b, 0x76, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x48, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x56, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x44, 0x45,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x04, 0x22, 0xd3, 0x02, 0x0a, 0x0d, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x6b, 0x76, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x4b, 0x56, 0x52, 0x08, 0x6b, 0x76, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x50, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x44, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4b, 0x56, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x10, 0x05, 0x22,
	0x81, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x09, 0x6b, 0x76, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x4b, 0x56, 0x52, 0x08, 0x6b, 0x76, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x23,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x49, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe4,
	0x03, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x72,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x52, 0x50, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x52, 0x50, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x50, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0xc9, 0x02, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x43, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x02, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x70, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x50, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x50, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x61, 0x0a,
	0x12, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b,
	0x22, 0x9c, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x72,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x35, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xd5, 0x02, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x53, 0x0a, 0x19, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x14,
	0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xcc, 0x04,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x54, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x54, 0x54, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x54, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x54, 0x54, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x61,
	0x66, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x61, 0x66, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x72,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x44, 0x72, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x44, 0x72, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x44, 0x72, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x57,
	0x41, 0x4c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x57, 0x41, 0x4c, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x54, 0x4c, 0x53, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x54, 0x4c, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x4d, 0x61, 0x78,
	0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x32, 0xa9, 0x06, 0x0a,
	0x07, 0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44,
	0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x64,
	0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x72, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x72, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x10, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x24, 0x2e, 0x64,
	0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e,
	0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1d, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x10, 0x2e,
	0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x11, 0x2e,
	0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x1a, 0x19, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0f, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x10, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x2e,
	0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1c, 0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6e, 0x69, 0x2f, 0x64, 0x72, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x2f, 0x64, 0x72, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drummer_proto_rawDescOnce sync.Once
	file_drummer_proto_rawDescData = file_drummer_proto_rawDesc
)

func file_drummer_proto_rawDescGZIP() []byte {
	file_drummer_proto_rawDescOnce.Do(func() {
		file_drummer_proto_rawDescData = protoimpl.X.CompressGZIP(file_drummer_proto_rawDescData)
	})
	return file_drummer_proto_rawDescData
}

var file_drummer_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_drummer_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_drummer_proto_goTypes = []interface{}{
	(Change_Type)(0),                  // 0: drummerpb.Change.Type
	(ChangeResponse_Code)(0),          // 1: drummerpb.ChangeResponse.Code
	(Update_Type)(0),                  // 2: drummerpb.Update.Type
	(LookupRequest_Type)(0),           // 3: drummerpb.LookupRequest.Type
	(LookupResponse_Code)(0),          // 4: drummerpb.LookupResponse.Code
	(Request_Type)(0),                 // 5: drummerpb.Request.Type
	(ShardState_State)(0),             // 6: drummerpb.ShardState.State
	(*Regions)(nil),                   // 7: drummerpb.Regions
	(*Shard)(nil),                     // 8: drummerpb.Shard
	(*ShardCollection)(nil),           // 9: drummerpb.ShardCollection
	(*KV)(nil),                        // 10: drummerpb.KV
	(*Change)(nil),                    // 11: drummerpb.Change
	(*ChangeResponse)(nil),            // 12: drummerpb.ChangeResponse
	(*Update)(nil),                    // 13: drummerpb.Update
	(*LookupRequest)(nil),             // 14: drummerpb.LookupRequest
	(*LookupResponse)(nil),            // 15: drummerpb.LookupResponse
	(*Request)(nil),                   // 16: drummerpb.Request
	(*ShardStateRequest)(nil),         // 17: drummerpb.ShardStateRequest
	(*ShardState)(nil),                // 18: drummerpb.ShardState
	(*ShardInfo)(nil),                 // 19: drummerpb.ShardInfo
	(*LogInfo)(nil),                   // 20: drummerpb.LogInfo
	(*ShardStates)(nil),               // 21: drummerpb.ShardStates
	(*NodeHostInfo)(nil),              // 22: drummerpb.NodeHostInfo
	(*NodeHostCollection)(nil),        // 23: drummerpb.NodeHostCollection
	(*ConfigChangeIndexList)(nil),     // 24: drummerpb.ConfigChangeIndexList
	(*DeploymentInfo)(nil),            // 25: drummerpb.DeploymentInfo
	(*Empty)(nil),                     // 26: drummerpb.Empty
	(*NodeHostRequest)(nil),           // 27: drummerpb.NodeHostRequest
	(*NodeHostRequestCollection)(nil), // 28: drummerpb.NodeHostRequestCollection
	(*DrummerConfigRequest)(nil),      // 29: drummerpb.DrummerConfigRequest
	(*Config)(nil),                    // 30: drummerpb.Config
	nil,                               // 31: drummerpb.ShardState.ReplicasEntry
	nil,                               // 32: drummerpb.ShardState.RPCAddressesEntry
	nil,                               // 33: drummerpb.ShardInfo.ReplicasEntry
	nil,                               // 34: drummerpb.ConfigChangeIndexList.IndexesEntry
}
var file_drummer_proto_depIdxs = []int32{
	8,  // 0: drummerpb.ShardCollection.shards:type_name -> drummerpb.Shard
	0,  // 1: drummerpb.Change.type:type_name -> drummerpb.Change.Type
	1,  // 2: drummerpb.ChangeResponse.code:type_name -> drummerpb.ChangeResponse.Code
	11, // 3: drummerpb.Update.change:type_name -> drummerpb.Change
	2,  // 4: drummerpb.Update.type:type_name -> drummerpb.Update.Type
	10, // 5: drummerpb.Update.kv_update:type_name -> drummerpb.KV
	22, // 6: drummerpb.Update.nodehost_info:type_name -> drummerpb.NodeHostInfo
	28, // 7: drummerpb.Update.requests:type_name -> drummerpb.NodeHostRequestCollection
	3,  // 8: drummerpb.LookupRequest.type:type_name -> drummerpb.LookupRequest.Type
	10, // 9: drummerpb.LookupRequest.kv_lookup:type_name -> drummerpb.KV
	17, // 10: drummerpb.LookupRequest.stats:type_name -> drummerpb.ShardStateRequest
	4,  // 11: drummerpb.LookupResponse.code:type_name -> drummerpb.LookupResponse.Code
	8,  // 12: drummerpb.LookupResponse.shards:type_name -> drummerpb.Shard
	10, // 13: drummerpb.LookupResponse.kv_result:type_name -> drummerpb.KV
	28, // 14: drummerpb.LookupResponse.requests:type_name -> drummerpb.NodeHostRequestCollection
	5,  // 15: drummerpb.Request.type:type_name -> drummerpb.Request.Type
	31, // 16: drummerpb.ShardState.replicas:type_name -> drummerpb.ShardState.ReplicasEntry
	32, // 17: drummerpb.ShardState.RPCAddresses:type_name -> drummerpb.ShardState.RPCAddressesEntry
	6,  // 18: drummerpb.ShardState.state:type_name -> drummerpb.ShardState.State
	33, // 19: drummerpb.ShardInfo.replicas:type_name -> drummerpb.ShardInfo.ReplicasEntry
	18, // 20: drummerpb.ShardStates.collection:type_name -> drummerpb.ShardState
	19, // 21: drummerpb.NodeHostInfo.shard_info:type_name -> drummerpb.ShardInfo
	20, // 22: drummerpb.NodeHostInfo.plog_info:type_name -> drummerpb.LogInfo
	22, // 23: drummerpb.NodeHostCollection.collection:type_name -> drummerpb.NodeHostInfo
	34, // 24: drummerpb.ConfigChangeIndexList.indexes:type_name -> drummerpb.ConfigChangeIndexList.IndexesEntry
	16, // 25: drummerpb.NodeHostRequest.change:type_name -> drummerpb.Request
	30, // 26: drummerpb.NodeHostRequest.config:type_name -> drummerpb.Config
	27, // 27: drummerpb.NodeHostRequestCollection.requests:type_name -> drummerpb.NodeHostRequest
	29, // 28: drummerpb.Drummer.AddDrummerServer:input_type -> drummerpb.DrummerConfigRequest
	29, // 29: drummerpb.Drummer.RemoveDrummerServer:input_type -> drummerpb.DrummerConfigRequest
	26, // 30: drummerpb.Drummer.GetDeploymentInfo:input_type -> drummerpb.Empty
	26, // 31: drummerpb.Drummer.GetShardConfigChangeIndexList:input_type -> drummerpb.Empty
	22, // 32: drummerpb.Drummer.ReportAvailableNodeHost:input_type -> drummerpb.NodeHostInfo
	26, // 33: drummerpb.Drummer.GetNodeHostCollection:input_type -> drummerpb.Empty
	26, // 34: drummerpb.Drummer.GetShards:input_type -> drummerpb.Empty
	11, // 35: drummerpb.Drummer.SubmitChange:input_type -> drummerpb.Change
	26, // 36: drummerpb.Drummer.SetBootstrapped:input_type -> drummerpb.Empty
	7,  // 37: drummerpb.Drummer.SetRegions:input_type -> drummerpb.Regions
	17, // 38: drummerpb.Drummer.GetShardStates:input_type -> drummerpb.ShardStateRequest
	26, // 39: drummerpb.Drummer.AddDrummerServer:output_type -> drummerpb.Empty
	26, // 40: drummerpb.Drummer.RemoveDrummerServer:output_type -> drummerpb.Empty
	25, // 41: drummerpb.Drummer.GetDeploymentInfo:output_type -> drummerpb.DeploymentInfo
	24, // 42: drummerpb.Drummer.GetShardConfigChangeIndexList:output_type -> drummerpb.ConfigChangeIndexList
	28, // 43: drummerpb.Drummer.ReportAvailableNodeHost:output_type -> drummerpb.NodeHostRequestCollection
	23, // 44: drummerpb.Drummer.GetNodeHostCollection:output_type -> drummerpb.NodeHostCollection
	9,  // 45: drummerpb.Drummer.GetShards:output_type -> drummerpb.ShardCollection
	12, // 46: drummerpb.Drummer.SubmitChange:output_type -> drummerpb.ChangeResponse
	12, // 47: drummerpb.Drummer.SetBootstrapped:output_type -> drummerpb.ChangeResponse
	12, // 48: drummerpb.Drummer.SetRegions:output_type -> drummerpb.ChangeResponse
	21, // 49: drummerpb.Drummer.GetShardStates:output_type -> drummerpb.ShardStates
	39, // [39:50] is the sub-list for method output_type
	28, // [28:39] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_drummer_proto_init() }
func file_drummer_proto_init() {
	if File_drummer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_drummer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHostCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigChangeIndexList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHostRequestCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrummerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drummer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drummer_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drummer_proto_goTypes,
		DependencyIndexes: file_drummer_proto_depIdxs,
		EnumInfos:         file_drummer_proto_enumTypes,
		MessageInfos:      file_drummer_proto_msgTypes,
	}.Build()
	File_drummer_proto = out.File
	file_drummer_proto_rawDesc = nil
	file_drummer_proto_goTypes = nil
	file_drummer_proto_depIdxs = nil
}
