// Copyright 2017 Lei Ni (nilei81@gmail.com).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
// Package drummerpb contains definition of internal structs and messages used
// by the optional Drummer component. Your dragonboat application only needs to
// import this package when you choose to let drummer to manage your distributed
// nodehost instances. 
package drummerpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

//
// DrummerDB related
//

// Regions is the message used to describe the requested region.
message Regions {
  repeated string region  = 1;
  repeated uint64 count   = 2;
}

// Cluster is the message used to describe a defined raft cluster.
message Cluster {
  repeated uint64 members         = 1;
  optional uint64 cluster_id      = 2 [(gogoproto.nullable) = false];
  optional string app_name        = 3 [(gogoproto.nullable) = false];
}

// ClusterCollection is the message used to describe a list of clusters.
message ClusterCollection {
  repeated Cluster clusters       = 1;
}

// KV is the message used to describe a Key-Value request. 
message KV {
  required string key             = 1 [(gogoproto.nullable) = false];
  required string value           = 2 [(gogoproto.nullable) = false];
  optional uint64 instance_id     = 3 [(gogoproto.nullable) = false];
  optional uint64 tick            = 4 [(gogoproto.nullable) = false];
  optional uint64 old_instance_id = 5 [(gogoproto.nullable) = false];
  optional bool finalized         = 6 [(gogoproto.nullable) = false];
}

// Change is the message used to define new raft clusters in Drummer.
message Change {
  enum Type {
    CREATE = 0;
  }

  required Type type              = 1 [(gogoproto.nullable) = false];
  required uint64 cluster_id      = 2 [(gogoproto.nullable) = false];
  repeated uint64 members         = 3;
  optional string app_name        = 4 [(gogoproto.nullable) = false];
}

// ChangeResponse is the message issued by Drummer in response to Change
// messages. 
message ChangeResponse {
  enum Code {
    OK = 0;
    CLUSTER_NOT_FOUND = 1;
    CONFLICT_FOUND = 2;
    UNKNOWN_RETRY = 3;
    CLUSTER_EXIST = 4;
    BOOTSTRAPPED = 5;
    REGIONS_SET = 6;
  }

  required Code code              = 1 [(gogoproto.nullable) = false];
}

// Update is the message used for updating DrummerDB. DrummerDB is used to
// store raft cluster definitions and Drummer key-value pairs. 
message Update {
  enum Type {
    CLUSTER = 0;
    KV = 1;
    TICK = 2;
    NODEHOST_INFO = 3;
    REQUESTS = 4;
  }

  optional Change change          = 1 [(gogoproto.nullable) = false];
  required Type type              = 2 [(gogoproto.nullable) = false];
  optional KV kv_update           = 3 [(gogoproto.nullable) = false];
  optional NodeHostInfo nodehost_info = 4 [(gogoproto.nullable) = false];
  optional NodeHostRequestCollection requests = 5 [(gogoproto.nullable) = false]; 
}

// LookupRequest is the lookup request message.
message LookupRequest {
  enum Type {
    CLUSTER = 0;
    KV = 1;
    SCHEDULER_CONTEXT = 3;
    REQUESTS = 4;
    CLUSTER_STATES = 5;
  }

  required Type type              = 1 [(gogoproto.nullable) = false];
  repeated uint64 cluster_id_list = 2;
  optional KV kv_lookup           = 3 [(gogoproto.nullable) = false];
  optional uint64 requests_id     = 4 [(gogoproto.nullable) = false];
  optional string address         = 5 [(gogoproto.nullable) = false];
  optional ClusterStateRequest stats = 6 [(gogoproto.nullable) = false];
}

// LookupResponse is the lookup response message. 
message LookupResponse {
  enum Code {
    OK = 0;
    CLUSTER_NOT_FOUND = 1;
  }

  optional Code code              = 1 [(gogoproto.nullable) = false];
  repeated Cluster clusters       = 2; 
  optional KV kv_result           = 3 [(gogoproto.nullable) = false];
  optional NodeHostRequestCollection requests = 4 [(gogoproto.nullable) = false];
}

//
// DrummerAPI related
// 

// Request is the Request sent to Nodehosts. 
message Request {
  enum Type {
    CREATE = 0;
    DELETE = 1;
    ADD = 2;
    KILL = 3;
  }

  required Type type              = 1 [(gogoproto.nullable) = false];
  required uint64 cluster_id      = 2 [(gogoproto.nullable) = false];
  repeated uint64 members         = 3;
  optional string app_name        = 4 [(gogoproto.nullable) = false];
  optional uint64 conf_change_id  = 5 [(gogoproto.nullable) = false];
}

// ClusterStateRequest is the message used to send a list of cluster id values
// to Drummer for requesting cluster state details. 
message ClusterStateRequest {
  repeated uint64 cluster_id_list = 1;
}

// ClusterState is the message used to provide cluster state to clients. 
message ClusterState {
  enum State {
    OK = 0;
    UNAVAILABLE = 1;
  }

  required uint64 cluster_id          = 1 [(gogoproto.nullable) = false];
  optional uint64 leader_node_id      = 2 [(gogoproto.nullable) = false];
  map<uint64, string> nodes           = 3;
  map<uint64, string> RPCAddresses    = 4;
  optional State state                = 5 [(gogoproto.nullable) = false];
  optional uint64 config_change_index = 6 [(gogoproto.nullable) = false];
}

message ClusterInfo {
  required uint64 cluster_id          = 1 [(gogoproto.nullable) = false];
  required uint64 node_id             = 2 [(gogoproto.nullable) = false];
  optional bool is_leader             = 3 [(gogoproto.nullable) = false];
  map<uint64, string> nodes           = 4;
  optional uint64 config_change_index = 5 [(gogoproto.nullable) = false];
  optional bool incomplete            = 6 [(gogoproto.nullable) = false];
  optional bool pending               = 7 [(gogoproto.nullable) = false];
}

// LogInfo is the message used by nodehost to notify Drummer that it has 
// raft log that belongs to the specified raft cluster. 
message LogInfo {
  required uint64 cluster_id          = 1 [(gogoproto.nullable) = false];
  required uint64 node_id             = 2 [(gogoproto.nullable) = false];
}

// ClusterStates contains a list of ClusterState messages. 
message ClusterStates {
  repeated ClusterState collection    = 1;
}

// NodeHostInfo is the message used by nodehost to report its state, including
// managed raft clusters and local persistent logs to Drummer. 
message NodeHostInfo {
  required string raft_address       	= 1 [(gogoproto.nullable) = false];
  repeated ClusterInfo cluster_info  	= 2 [(gogoproto.nullable) = false];
  repeated uint64 cluster_id_list     = 3;
  optional uint64 last_tick           = 4 [(gogoproto.nullable) = false];
  optional bool plog_info_included    = 5 [(gogoproto.nullable) = false];
  repeated LogInfo plog_info         	= 6 [(gogoproto.nullable) = false];
  optional string region              = 7 [(gogoproto.nullable) = false];
  optional string RPCAddress          = 8 [(gogoproto.nullable) = false];
}

// NodeHostCollection contains a list of NodeHostInfo messages. 
message NodeHostCollection {
  repeated NodeHostInfo collection    = 1 [(gogoproto.nullable) = false];
  optional uint64 tick                = 2 [(gogoproto.nullable) = false];
}

// ConfigChangeIndexList is the message used to report ConfChangeIndex values
// of clusters.
message ConfigChangeIndexList {
  map<uint64, uint64> indexes         = 1;
}

// DeploymentInfo is a message that contains the deployment id generated by
// Drummer. 
message DeploymentInfo {
  required uint64 deployment_id       = 1 [(gogoproto.nullable) = false];
}

// Empty is a dummy message. 
message Empty {}

//
// NodeHost request/response related
//

// NodeHostRequest is the request message sent to NodeHost by Drummer.
message NodeHostRequest {
  optional Request change             = 1 [(gogoproto.nullable) = false];
  repeated uint64 node_id_list        = 2;
  repeated string address_list        = 3;
  optional uint64 instantiate_node_id = 4 [(gogoproto.nullable) = false];
  optional string raft_address        = 5 [(gogoproto.nullable) = false];
  optional bool join                  = 6 [(gogoproto.nullable) = false];
  optional bool restore               = 7 [(gogoproto.nullable) = false];
  optional string app_name            = 8 [(gogoproto.nullable) = false];
  optional Config config              = 9 [(gogoproto.nullable) = false];
}

// NodeHostRequestCollection contains a list of NodeHostRequest messages. 
message NodeHostRequestCollection {
  repeated NodeHostRequest requests   = 1 [(gogoproto.nullable) = false];
}

message DrummerConfigRequest {
  required uint64 node_id             = 1 [(gogoproto.nullable) = false];
  optional string address             = 2 [(gogoproto.nullable) = false];
}

// Config is the message used to describe configurations for raft clusters. 
message Config {
  optional uint64 ElectionRTT         = 1 [(gogoproto.nullable) = false];
  optional uint64 HeartbeatRTT        = 2 [(gogoproto.nullable) = false];
  optional bool CheckQuorum            = 5 [(gogoproto.nullable) = false];
  optional uint64 CompactionOverhead   = 6 [(gogoproto.nullable) = false];
  optional uint64 SnapshotEntries      = 7 [(gogoproto.nullable) = false];
  optional string RaftClusterAddresses = 8 [(gogoproto.nullable) = false];
  optional string DrummerAddress       = 9 [(gogoproto.nullable) = false];
  optional uint64 DrummerNodeID        = 10 [(gogoproto.nullable) = false];
  optional string DrummerNodeHostDirectory = 11 [(gogoproto.nullable) = false];
  optional string DrummerWALDirectory  = 12 [(gogoproto.nullable) = false];
  optional bool MutualTLS              = 13 [(gogoproto.nullable) = false];
  optional string CAFile               = 14 [(gogoproto.nullable) = false];
  optional string CertFile             = 15 [(gogoproto.nullable) = false];
  optional string KeyFile              = 16 [(gogoproto.nullable) = false];
  optional uint64 MaxInMemLogSize      = 17 [(gogoproto.nullable) = false];
}

service Drummer {
  // AddDrummerServer adds a new server to the Drummer cluster.
  rpc AddDrummerServer(DrummerConfigRequest) returns (Empty) {}
  // RemoveDrummerServer removes an existing server from the Drummer cluster. 
  rpc RemoveDrummerServer(DrummerConfigRequest) returns (Empty) {}
  // GetDeploymentInfo returns the DeploymentID value from Drummer. 
  rpc GetDeploymentInfo(Empty) returns (DeploymentInfo) {}
  // GetClusterConfigChangeIndexList returns the ConfChangeIndex values of all
  // known clusters. 
  rpc GetClusterConfigChangeIndexList(Empty) returns (ConfigChangeIndexList) {}
  // ReportAvailableNodeHost is used by nodehost to report its state details to
  // Drummer.
  rpc ReportAvailableNodeHost(NodeHostInfo) returns (NodeHostRequestCollection) {}
  // GetNodeHostCollection returns a list of all known nodehosts from Drummer.
  rpc GetNodeHostCollection(Empty) returns (NodeHostCollection) {}
  // GetClusters returns a list of all known clusters from Drummer.
  rpc GetClusters(Empty) returns (ClusterCollection) {} 
  // SubmitChange is used by Drummer clients to submit DrummerDB updates. 
  rpc SubmitChange(Change) returns (ChangeResponse) {}
  // SetBootstrapped sets the Drummer as bootstrapped. No more clusters can be defined 
  // once Drummer is set as bootstrapped. Bootstrapped Drummer will start to schedule
  // raft nodes. 
  rpc SetBootstrapped(Empty) returns (ChangeResponse) {}
  // SetRegions sets region info for defined clusters. 
  rpc SetRegions(Regions) returns (ChangeResponse) {}
  // GetClusterStates returns ClusterStates for selected raft clusters. 
  rpc GetClusterStates(ClusterStateRequest) returns (ClusterStates) {}
}
