// Copyright 2017 Lei Ni (nilei81@gmail.com).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
// Package drummerpb contains definition of internal structs and messages used
// by the Drummer component. Your dragonboat application only needs to
// import this package when you choose to let drummer to manage your distributed
// nodehost instances. 
package drummerpb;

option go_package= "github.com/lni/drummer/drummerpb";

//
// DrummerDB related
//

// Regions is the message used to describe the requested region.
message Regions {
  repeated string region  = 1;
  repeated uint64 count   = 2;
}

// Shard is the message used to describe a defined raft shard.
message Shard {
  repeated uint64 members         = 1;
  uint64 shard_id      = 2;
  string app_name        = 3;
}

// ShardCollection is the message used to describe a list of shards.
message ShardCollection {
  repeated Shard shards       = 1;
}

// KV is the message used to describe a Key-Value request. 
message KV {
  bytes key             = 1;
  bytes value           = 2;
  uint64 instance_id     = 3;
  uint64 tick            = 4;
  uint64 old_instance_id = 5;
  bool finalized         = 6;
}

// Change is the message used to define new raft shards in Drummer.
message Change {
  enum Type {
    CREATE = 0;
  }

  Type type              = 1;
  uint64 shard_id      = 2;
  repeated uint64 members         = 3;
  string app_name        = 4;
}

// ChangeResponse is the message issued by Drummer in response to Change
// messages. 
message ChangeResponse {
  enum Code {
    OK = 0;
    SHARD_NOT_FOUND = 1;
    CONFLICT_FOUND = 2;
    UNKNOWN_RETRY = 3;
    SHARD_EXIST = 4;
    BOOTSTRAPPED = 5;
    REGIONS_SET = 6;
  }

  Code code              = 1;
}

// Update is the message used for updating DrummerDB. DrummerDB is used to
// store raft shard definitions and Drummer key-value pairs. 
message Update {
  enum Type {
    SHARD = 0;
    KV = 1;
    TICK = 2;
    NODEHOST_INFO = 3;
    REQUESTS = 4;
  }

  Change change          = 1;
  Type type              = 2;
  KV kv_update           = 3;
  NodeHostInfo nodehost_info = 4;
  NodeHostRequestCollection requests = 5; 
}

// LookupRequest is the lookup request message.
message LookupRequest {
  enum Type {
    SHARD = 0;
    KV = 1;
    SCHEDULER_CONTEXT = 3;
    REQUESTS = 4;
    SHARD_STATES = 5;
  }

  Type type              = 1;
  repeated uint64 shard_id_list   = 2;
  KV kv_lookup           = 3;
  uint64 requests_id     = 4;
  string address         = 5;
  ShardStateRequest stats = 6;
}

// LookupResponse is the lookup response message. 
message LookupResponse {
  enum Code {
    OK = 0;
    SHARD_NOT_FOUND = 1;
  }

  Code code              = 1;
  repeated Shard shards           = 2; 
  KV kv_result           = 3;
  NodeHostRequestCollection requests = 4;
}

//
// DrummerAPI related
// 

// Request is the Request sent to Nodehosts. 
message Request {
  enum Type {
    CREATE = 0;
    DELETE = 1;
    ADD = 2;
    KILL = 3;
  }

  Type type              = 1;
  uint64 shard_id        = 2;
  repeated uint64 members         = 3;
  string app_name        = 4;
  uint64 conf_change_id  = 5;
}

// ShardStateRequest is the message used to send a list of shard id values
// to Drummer for requesting shard state details. 
message ShardStateRequest {
  repeated uint64 shard_id_list = 1;
}

// ShardState is the message used to provide shard state to clients. 
message ShardState {
  enum State {
    OK = 0;
    UNAVAILABLE = 1;
  }

  uint64 shard_id            = 1;
  uint64 leader_replica_id   = 2;
  map<uint64, string> replicas        = 3;
  map<uint64, string> RPCAddresses    = 4;
  State state                = 5;
  uint64 config_change_index = 6;
}

message ShardInfo {
  uint64 shard_id            = 1;
  uint64 replica_id          = 2;
  bool is_leader             = 3;
  map<uint64, string> replicas        = 4;
  uint64 config_change_index = 5;
  bool incomplete            = 6;
  bool pending               = 7;
}

// LogInfo is the message used by nodehost to notify Drummer that it has 
// raft log that belongs to the specified raft shard. 
message LogInfo {
  uint64 shard_id          = 1;
  uint64 replica_id             = 2;
}

// ShardStates contains a list of ShardState messages. 
message ShardStates {
  repeated ShardState collection    = 1;
}

// NodeHostInfo is the message used by nodehost to report its state, including
// managed raft shards and local persistent logs to Drummer. 
message NodeHostInfo {
  string raft_address       	= 1;
  repeated ShardInfo shard_info  	= 2;
  repeated uint64 shard_id_list     = 3;
  uint64 last_tick           = 4;
  bool plog_info_included    = 5;
  repeated LogInfo plog_info         	= 6;
  string region              = 7;
  string RPCAddress          = 8;
}

// NodeHostCollection contains a list of NodeHostInfo messages. 
message NodeHostCollection {
  repeated NodeHostInfo collection    = 1;
  uint64 tick                = 2;
}

// ConfigChangeIndexList is the message used to report ConfChangeIndex values
// of shards.
message ConfigChangeIndexList {
  map<uint64, uint64> indexes         = 1;
}

// DeploymentInfo is a message that contains the deployment id generated by
// Drummer. 
message DeploymentInfo {
  uint64 deployment_id       = 1;
}

// Empty is a dummy message. 
message Empty {}

//
// NodeHost request/response related
//

// NodeHostRequest is the request message sent to NodeHost by Drummer.
message NodeHostRequest {
  Request change             = 1;
  repeated uint64 replica_id_list     = 2;
  repeated string address_list        = 3;
  uint64 instantiate_replica_id = 4;
  string raft_address        = 5;
  bool join                  = 6;
  bool restore               = 7;
  string app_name            = 8;
  Config config              = 9;
}

// NodeHostRequestCollection contains a list of NodeHostRequest messages. 
message NodeHostRequestCollection {
  repeated NodeHostRequest requests   = 1;
}

message DrummerConfigRequest {
  uint64 replica_id             = 1;
  string address             = 2;
}

// Config is the message used to describe configurations for raft shards. 
message Config {
  uint64 ElectionRTT         = 1;
  uint64 HeartbeatRTT        = 2;
  bool CheckQuorum            = 5;
  uint64 CompactionOverhead   = 6;
  uint64 SnapshotEntries      = 7;
  string RaftShardAddresses = 8;
  string DrummerAddress       = 9;
  uint64 DrummerNodeID        = 10;
  string DrummerNodeHostDirectory = 11;
  string DrummerWALDirectory  = 12;
  bool MutualTLS              = 13;
  string CAFile               = 14;
  string CertFile             = 15;
  string KeyFile              = 16;
  uint64 MaxInMemLogSize      = 17;
}

service Drummer {
  // AddDrummerServer adds a new server to the Drummer shard.
  rpc AddDrummerServer(DrummerConfigRequest) returns (Empty) {}
  // RemoveDrummerServer removes an existing server from the Drummer shard. 
  rpc RemoveDrummerServer(DrummerConfigRequest) returns (Empty) {}
  // GetDeploymentInfo returns the DeploymentID value from Drummer. 
  rpc GetDeploymentInfo(Empty) returns (DeploymentInfo) {}
  // GetShardConfigChangeIndexList returns the ConfChangeIndex values of all
  // known shards. 
  rpc GetShardConfigChangeIndexList(Empty) returns (ConfigChangeIndexList) {}
  // ReportAvailableNodeHost is used by nodehost to report its state details to
  // Drummer.
  rpc ReportAvailableNodeHost(NodeHostInfo) returns (NodeHostRequestCollection) {}
  // GetNodeHostCollection returns a list of all known nodehosts from Drummer.
  rpc GetNodeHostCollection(Empty) returns (NodeHostCollection) {}
  // GetShards returns a list of all known shards from Drummer.
  rpc GetShards(Empty) returns (ShardCollection) {} 
  // SubmitChange is used by Drummer clients to submit DrummerDB updates. 
  rpc SubmitChange(Change) returns (ChangeResponse) {}
  // SetBootstrapped sets the Drummer as bootstrapped. No more shards can be defined 
  // once Drummer is set as bootstrapped. Bootstrapped Drummer will start to schedule
  // raft nodes. 
  rpc SetBootstrapped(Empty) returns (ChangeResponse) {}
  // SetRegions sets region info for defined shards. 
  rpc SetRegions(Regions) returns (ChangeResponse) {}
  // GetShardStates returns ShardStates for selected raft shards. 
  rpc GetShardStates(ShardStateRequest) returns (ShardStates) {}
}
