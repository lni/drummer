// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: drummer.proto

package drummerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrummerClient is the client API for Drummer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrummerClient interface {
	// AddDrummerServer adds a new server to the Drummer shard.
	AddDrummerServer(ctx context.Context, in *DrummerConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	// RemoveDrummerServer removes an existing server from the Drummer shard.
	RemoveDrummerServer(ctx context.Context, in *DrummerConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetDeploymentInfo returns the DeploymentID value from Drummer.
	GetDeploymentInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeploymentInfo, error)
	// GetShardConfigChangeIndexList returns the ConfChangeIndex values of all
	// known shards.
	GetShardConfigChangeIndexList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigChangeIndexList, error)
	// ReportAvailableNodeHost is used by nodehost to report its state details to
	// Drummer.
	ReportAvailableNodeHost(ctx context.Context, in *NodeHostInfo, opts ...grpc.CallOption) (*NodeHostRequestCollection, error)
	// GetNodeHostCollection returns a list of all known nodehosts from Drummer.
	GetNodeHostCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeHostCollection, error)
	// GetShards returns a list of all known shards from Drummer.
	GetShards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShardCollection, error)
	// SubmitChange is used by Drummer clients to submit DrummerDB updates.
	SubmitChange(ctx context.Context, in *Change, opts ...grpc.CallOption) (*ChangeResponse, error)
	// SetBootstrapped sets the Drummer as bootstrapped. No more shards can be defined
	// once Drummer is set as bootstrapped. Bootstrapped Drummer will start to schedule
	// raft nodes.
	SetBootstrapped(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeResponse, error)
	// SetRegions sets region info for defined shards.
	SetRegions(ctx context.Context, in *Regions, opts ...grpc.CallOption) (*ChangeResponse, error)
	// GetShardStates returns ShardStates for selected raft shards.
	GetShardStates(ctx context.Context, in *ShardStateRequest, opts ...grpc.CallOption) (*ShardStates, error)
}

type drummerClient struct {
	cc grpc.ClientConnInterface
}

func NewDrummerClient(cc grpc.ClientConnInterface) DrummerClient {
	return &drummerClient{cc}
}

func (c *drummerClient) AddDrummerServer(ctx context.Context, in *DrummerConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/AddDrummerServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) RemoveDrummerServer(ctx context.Context, in *DrummerConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/RemoveDrummerServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) GetDeploymentInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeploymentInfo, error) {
	out := new(DeploymentInfo)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/GetDeploymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) GetShardConfigChangeIndexList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigChangeIndexList, error) {
	out := new(ConfigChangeIndexList)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/GetShardConfigChangeIndexList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) ReportAvailableNodeHost(ctx context.Context, in *NodeHostInfo, opts ...grpc.CallOption) (*NodeHostRequestCollection, error) {
	out := new(NodeHostRequestCollection)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/ReportAvailableNodeHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) GetNodeHostCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeHostCollection, error) {
	out := new(NodeHostCollection)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/GetNodeHostCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) GetShards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShardCollection, error) {
	out := new(ShardCollection)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/GetShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) SubmitChange(ctx context.Context, in *Change, opts ...grpc.CallOption) (*ChangeResponse, error) {
	out := new(ChangeResponse)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/SubmitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) SetBootstrapped(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeResponse, error) {
	out := new(ChangeResponse)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/SetBootstrapped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) SetRegions(ctx context.Context, in *Regions, opts ...grpc.CallOption) (*ChangeResponse, error) {
	out := new(ChangeResponse)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/SetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drummerClient) GetShardStates(ctx context.Context, in *ShardStateRequest, opts ...grpc.CallOption) (*ShardStates, error) {
	out := new(ShardStates)
	err := c.cc.Invoke(ctx, "/drummerpb.Drummer/GetShardStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrummerServer is the server API for Drummer service.
// All implementations must embed UnimplementedDrummerServer
// for forward compatibility
type DrummerServer interface {
	// AddDrummerServer adds a new server to the Drummer shard.
	AddDrummerServer(context.Context, *DrummerConfigRequest) (*Empty, error)
	// RemoveDrummerServer removes an existing server from the Drummer shard.
	RemoveDrummerServer(context.Context, *DrummerConfigRequest) (*Empty, error)
	// GetDeploymentInfo returns the DeploymentID value from Drummer.
	GetDeploymentInfo(context.Context, *Empty) (*DeploymentInfo, error)
	// GetShardConfigChangeIndexList returns the ConfChangeIndex values of all
	// known shards.
	GetShardConfigChangeIndexList(context.Context, *Empty) (*ConfigChangeIndexList, error)
	// ReportAvailableNodeHost is used by nodehost to report its state details to
	// Drummer.
	ReportAvailableNodeHost(context.Context, *NodeHostInfo) (*NodeHostRequestCollection, error)
	// GetNodeHostCollection returns a list of all known nodehosts from Drummer.
	GetNodeHostCollection(context.Context, *Empty) (*NodeHostCollection, error)
	// GetShards returns a list of all known shards from Drummer.
	GetShards(context.Context, *Empty) (*ShardCollection, error)
	// SubmitChange is used by Drummer clients to submit DrummerDB updates.
	SubmitChange(context.Context, *Change) (*ChangeResponse, error)
	// SetBootstrapped sets the Drummer as bootstrapped. No more shards can be defined
	// once Drummer is set as bootstrapped. Bootstrapped Drummer will start to schedule
	// raft nodes.
	SetBootstrapped(context.Context, *Empty) (*ChangeResponse, error)
	// SetRegions sets region info for defined shards.
	SetRegions(context.Context, *Regions) (*ChangeResponse, error)
	// GetShardStates returns ShardStates for selected raft shards.
	GetShardStates(context.Context, *ShardStateRequest) (*ShardStates, error)
	mustEmbedUnimplementedDrummerServer()
}

// UnimplementedDrummerServer must be embedded to have forward compatible implementations.
type UnimplementedDrummerServer struct {
}

func (UnimplementedDrummerServer) AddDrummerServer(context.Context, *DrummerConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDrummerServer not implemented")
}
func (UnimplementedDrummerServer) RemoveDrummerServer(context.Context, *DrummerConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDrummerServer not implemented")
}
func (UnimplementedDrummerServer) GetDeploymentInfo(context.Context, *Empty) (*DeploymentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentInfo not implemented")
}
func (UnimplementedDrummerServer) GetShardConfigChangeIndexList(context.Context, *Empty) (*ConfigChangeIndexList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardConfigChangeIndexList not implemented")
}
func (UnimplementedDrummerServer) ReportAvailableNodeHost(context.Context, *NodeHostInfo) (*NodeHostRequestCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAvailableNodeHost not implemented")
}
func (UnimplementedDrummerServer) GetNodeHostCollection(context.Context, *Empty) (*NodeHostCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeHostCollection not implemented")
}
func (UnimplementedDrummerServer) GetShards(context.Context, *Empty) (*ShardCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShards not implemented")
}
func (UnimplementedDrummerServer) SubmitChange(context.Context, *Change) (*ChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitChange not implemented")
}
func (UnimplementedDrummerServer) SetBootstrapped(context.Context, *Empty) (*ChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBootstrapped not implemented")
}
func (UnimplementedDrummerServer) SetRegions(context.Context, *Regions) (*ChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRegions not implemented")
}
func (UnimplementedDrummerServer) GetShardStates(context.Context, *ShardStateRequest) (*ShardStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardStates not implemented")
}
func (UnimplementedDrummerServer) mustEmbedUnimplementedDrummerServer() {}

// UnsafeDrummerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrummerServer will
// result in compilation errors.
type UnsafeDrummerServer interface {
	mustEmbedUnimplementedDrummerServer()
}

func RegisterDrummerServer(s grpc.ServiceRegistrar, srv DrummerServer) {
	s.RegisterService(&Drummer_ServiceDesc, srv)
}

func _Drummer_AddDrummerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrummerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).AddDrummerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/AddDrummerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).AddDrummerServer(ctx, req.(*DrummerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_RemoveDrummerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrummerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).RemoveDrummerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/RemoveDrummerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).RemoveDrummerServer(ctx, req.(*DrummerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_GetDeploymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).GetDeploymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/GetDeploymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).GetDeploymentInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_GetShardConfigChangeIndexList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).GetShardConfigChangeIndexList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/GetShardConfigChangeIndexList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).GetShardConfigChangeIndexList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_ReportAvailableNodeHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).ReportAvailableNodeHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/ReportAvailableNodeHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).ReportAvailableNodeHost(ctx, req.(*NodeHostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_GetNodeHostCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).GetNodeHostCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/GetNodeHostCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).GetNodeHostCollection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_GetShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).GetShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/GetShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).GetShards(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_SubmitChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Change)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).SubmitChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/SubmitChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).SubmitChange(ctx, req.(*Change))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_SetBootstrapped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).SetBootstrapped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/SetBootstrapped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).SetBootstrapped(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_SetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Regions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).SetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/SetRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).SetRegions(ctx, req.(*Regions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drummer_GetShardStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrummerServer).GetShardStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drummerpb.Drummer/GetShardStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrummerServer).GetShardStates(ctx, req.(*ShardStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drummer_ServiceDesc is the grpc.ServiceDesc for Drummer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drummer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drummerpb.Drummer",
	HandlerType: (*DrummerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDrummerServer",
			Handler:    _Drummer_AddDrummerServer_Handler,
		},
		{
			MethodName: "RemoveDrummerServer",
			Handler:    _Drummer_RemoveDrummerServer_Handler,
		},
		{
			MethodName: "GetDeploymentInfo",
			Handler:    _Drummer_GetDeploymentInfo_Handler,
		},
		{
			MethodName: "GetShardConfigChangeIndexList",
			Handler:    _Drummer_GetShardConfigChangeIndexList_Handler,
		},
		{
			MethodName: "ReportAvailableNodeHost",
			Handler:    _Drummer_ReportAvailableNodeHost_Handler,
		},
		{
			MethodName: "GetNodeHostCollection",
			Handler:    _Drummer_GetNodeHostCollection_Handler,
		},
		{
			MethodName: "GetShards",
			Handler:    _Drummer_GetShards_Handler,
		},
		{
			MethodName: "SubmitChange",
			Handler:    _Drummer_SubmitChange_Handler,
		},
		{
			MethodName: "SetBootstrapped",
			Handler:    _Drummer_SetBootstrapped_Handler,
		},
		{
			MethodName: "SetRegions",
			Handler:    _Drummer_SetRegions_Handler,
		},
		{
			MethodName: "GetShardStates",
			Handler:    _Drummer_GetShardStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drummer.proto",
}
