// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: multiraft.proto

package multiraftpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodehostAPIClient is the client API for NodehostAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodehostAPIClient interface {
	// GetSession returns a new Session object ready to be used for
	// making new proposals.
	GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Session, error)
	// CloseSession closes the specified Session object and removes
	// it from the associated Raft cluster. The Completed boolean field in
	// the returned SessionResponse object indicates whether the
	// Session object is successfully closed.
	CloseSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error)
	// Propose makes a proposal. When there is no error, the Result field of the
	// returned RaftResponse is the uint64 value returned by the Update function
	// of the associated IDataStore instance.
	Propose(ctx context.Context, in *RaftProposal, opts ...grpc.CallOption) (*RaftResponse, error)
	// Read makes a new linearizable read on the specified cluster. When there is
	// no error, the Data field of the returned RaftResponse is the returned
	// query result generated by the Lookup function of the associated IDataStore
	// instance.
	Read(ctx context.Context, in *RaftReadIndex, opts ...grpc.CallOption) (*RaftResponse, error)
}

type nodehostAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNodehostAPIClient(cc grpc.ClientConnInterface) NodehostAPIClient {
	return &nodehostAPIClient{cc}
}

func (c *nodehostAPIClient) GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/multiraftpb.NodehostAPI/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodehostAPIClient) CloseSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/multiraftpb.NodehostAPI/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodehostAPIClient) Propose(ctx context.Context, in *RaftProposal, opts ...grpc.CallOption) (*RaftResponse, error) {
	out := new(RaftResponse)
	err := c.cc.Invoke(ctx, "/multiraftpb.NodehostAPI/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodehostAPIClient) Read(ctx context.Context, in *RaftReadIndex, opts ...grpc.CallOption) (*RaftResponse, error) {
	out := new(RaftResponse)
	err := c.cc.Invoke(ctx, "/multiraftpb.NodehostAPI/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodehostAPIServer is the server API for NodehostAPI service.
// All implementations must embed UnimplementedNodehostAPIServer
// for forward compatibility
type NodehostAPIServer interface {
	// GetSession returns a new Session object ready to be used for
	// making new proposals.
	GetSession(context.Context, *SessionRequest) (*Session, error)
	// CloseSession closes the specified Session object and removes
	// it from the associated Raft cluster. The Completed boolean field in
	// the returned SessionResponse object indicates whether the
	// Session object is successfully closed.
	CloseSession(context.Context, *Session) (*SessionResponse, error)
	// Propose makes a proposal. When there is no error, the Result field of the
	// returned RaftResponse is the uint64 value returned by the Update function
	// of the associated IDataStore instance.
	Propose(context.Context, *RaftProposal) (*RaftResponse, error)
	// Read makes a new linearizable read on the specified cluster. When there is
	// no error, the Data field of the returned RaftResponse is the returned
	// query result generated by the Lookup function of the associated IDataStore
	// instance.
	Read(context.Context, *RaftReadIndex) (*RaftResponse, error)
	mustEmbedUnimplementedNodehostAPIServer()
}

// UnimplementedNodehostAPIServer must be embedded to have forward compatible implementations.
type UnimplementedNodehostAPIServer struct {
}

func (UnimplementedNodehostAPIServer) GetSession(context.Context, *SessionRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedNodehostAPIServer) CloseSession(context.Context, *Session) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedNodehostAPIServer) Propose(context.Context, *RaftProposal) (*RaftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedNodehostAPIServer) Read(context.Context, *RaftReadIndex) (*RaftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedNodehostAPIServer) mustEmbedUnimplementedNodehostAPIServer() {}

// UnsafeNodehostAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodehostAPIServer will
// result in compilation errors.
type UnsafeNodehostAPIServer interface {
	mustEmbedUnimplementedNodehostAPIServer()
}

func RegisterNodehostAPIServer(s grpc.ServiceRegistrar, srv NodehostAPIServer) {
	s.RegisterService(&NodehostAPI_ServiceDesc, srv)
}

func _NodehostAPI_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodehostAPIServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiraftpb.NodehostAPI/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodehostAPIServer).GetSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodehostAPI_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodehostAPIServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiraftpb.NodehostAPI/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodehostAPIServer).CloseSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodehostAPI_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodehostAPIServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiraftpb.NodehostAPI/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodehostAPIServer).Propose(ctx, req.(*RaftProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodehostAPI_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftReadIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodehostAPIServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiraftpb.NodehostAPI/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodehostAPIServer).Read(ctx, req.(*RaftReadIndex))
	}
	return interceptor(ctx, in, info, handler)
}

// NodehostAPI_ServiceDesc is the grpc.ServiceDesc for NodehostAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodehostAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiraftpb.NodehostAPI",
	HandlerType: (*NodehostAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _NodehostAPI_GetSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _NodehostAPI_CloseSession_Handler,
		},
		{
			MethodName: "Propose",
			Handler:    _NodehostAPI_Propose_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NodehostAPI_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiraft.proto",
}
