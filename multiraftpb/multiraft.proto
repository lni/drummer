// Copyright 2017 Lei Ni (nilei81@gmail.com).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto2";
package multiraftpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/lni/dragonboat/client/session.proto";

// Session is the session object used to track proposals for the
// specified raft cluster. SeriesID is a sequential id used to identify
// proposals, RespondedTo is a sequential id used to track the last
// responded proposal. 
message Session {
  optional uint64 ClusterID           = 1 [(gogoproto.nullable) = false];
  optional uint64 ClientID            = 2 [(gogoproto.nullable) = false];
  optional uint64 SeriesID            = 3 [(gogoproto.nullable) = false];
  optional uint64 RespondedTo         = 4 [(gogoproto.nullable) = false];
}

// SessionRequest is the message used to specified the interested raft
// cluster.
message SessionRequest {
  required uint64 cluster_id = 1 [(gogoproto.nullable) = false];
}

// SessionResponse is the message used to indicate whether the
// Session object is successfully closed. 
message SessionResponse {
  required bool completed = 1 [(gogoproto.nullable) = false];
}

// RaftProposal is the message used to describe the proposal to be made on the
// selected raft cluster. 
message RaftProposal {
  optional client.Session session = 1 [(gogoproto.nullable) = false];
  optional bytes data = 2;
}

// RaftReadIndex is the message used to describe the input to the ReadIndex
// protocol. The ReadIndex protocol is used for making linearizable read on
// the selected raft cluster. 
message RaftReadIndex {
  optional uint64 cluster_id = 1 [(gogoproto.nullable) = false];
  optional bytes data = 2;
}

// RaftResponse is the message used to describe the response produced by
// the Update or Lookup function of the IDataStore instance. 
message RaftResponse {
  optional uint64 result = 1 [(gogoproto.nullable) = false];
  optional bytes data = 2;
}

service NodehostAPI {
  // GetSession returns a new Session object ready to be used for
  // making new proposals. 
  rpc GetSession(SessionRequest) returns (client.Session) {}
  // CloseSession closes the specified Session object and removes
  // it from the associated Raft cluster. The Completed boolean field in
  // the returned SessionResponse object indicates whether the 
  // Session object is successfully closed. 
  rpc CloseSession(client.Session) returns (SessionResponse) {}
  // Propose makes a proposal. When there is no error, the Result field of the
  // returned RaftResponse is the uint64 value returned by the Update function
  // of the associated IDataStore instance.  
  rpc Propose(RaftProposal) returns(RaftResponse) {}
  // Read makes a new linearizable read on the specified cluster. When there is
  // no error, the Data field of the returned RaftResponse is the returned
  // query result generated by the Lookup function of the associated IDataStore
  // instance. 
  rpc Read(RaftReadIndex) returns (RaftResponse) {}
}
